<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\821008.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\821008.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Aug 26 11:48:23 2022
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; init_sw3516 &rArr; SW3516H_Set_PPS &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from cs32l010_it.o(i.ADC_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[20]">AWK_IRQHandler</a> from cs32l010_it.o(i.AWK_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[23]">CLKTRIM_IRQHandler</a> from cs32l010_it.o(i.CLKTRIM_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from cs32l010_it.o(i.FLASH_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[b]">GPIOA_IRQHandler</a> from cs32l010_it.o(i.GPIOA_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[c]">GPIOB_IRQHandler</a> from cs32l010_it.o(i.GPIOB_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[d]">GPIOC_IRQHandler</a> from cs32l010_it.o(i.GPIOC_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[e]">GPIOD_IRQHandler</a> from cs32l010_it.o(i.GPIOD_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from cs32l010_it.o(i.HardFault_Handler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[14]">I2C_IRQHandler</a> from cs32l010_it.o(i.I2C_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[1c]">IWDG_IRQHandler</a> from cs32l010_it.o(i.IWDG_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[17]">LPTIM_IRQHandler</a> from cs32l010_it.o(i.LPTIM_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[12]">LPUART_IRQHandler</a> from cs32l010_it.o(i.LPUART_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[1e]">LVD_IRQHandler</a> from cs32l010_it.o(i.LVD_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from cs32l010_it.o(i.NMI_Handler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[21]">OWIRE_IRQHandler</a> from cs32l010_it.o(i.OWIRE_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[1a]">PCA_IRQHandler</a> from cs32l010_it.o(i.PCA_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from cs32l010_it.o(i.PendSV_Handler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[22]">RTC_IRQHandler</a> from cs32l010_it.o(i.RTC_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_cs32l010.o(.text) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[13]">SPI_IRQHandler</a> from cs32l010_it.o(i.SPI_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from cs32l010_it.o(i.SVC_Handler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from cs32l010_it.o(i.SysTick_Handler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_cs32l010.o(i.SystemInit) referenced from startup_cs32l010.o(.text)
 <LI><a href="#[15]">TIM10_IRQHandler</a> from cs32l010_it.o(i.TIM10_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[16]">TIM11_IRQHandler</a> from cs32l010_it.o(i.TIM11_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[18]">TIM1_IRQHandler</a> from cs32l010_it.o(i.TIM1_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[19]">TIM2_IRQHandler</a> from cs32l010_it.o(i.TIM2_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[10]">UART0_IRQHandler</a> from cs32l010_it.o(i.UART0_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from cs32l010_it.o(i.UART1_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[1f]">VC_IRQHandler</a> from cs32l010_it.o(i.VC_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from cs32l010_it.o(i.WWDG_IRQHandler) referenced from startup_cs32l010.o(RESET)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup_cs32l010.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[89]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[91]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[92]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[98]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[99]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[33]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_sw3516 &rArr; SW3516H_Set_PPS &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[32]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[34]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cs32l010.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_cs32l010.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[36]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[a9]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IO_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init_COPY_22
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[31]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b1]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b2]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>AWK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.AWK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CCC_I2C_Init</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, ccc_i2c.o(i.CCC_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CCC_I2C_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>CCC_I2C_Init_COPY_22</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_Init_COPY_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CCC_I2C_Init_COPY_22 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>CCC_I2C_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ccc_i2c.o(i.CCC_I2C_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CCC_I2C_ReadReg &rArr; CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_22
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_11
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_set_ADC_Source
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_Mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_DMDP
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Read_AD_Value_H
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Read_AD_Value
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OFF_CC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_W
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_V
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Enable__SCP
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Check_Port_C_2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Check_Port_C_1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Check_Port_A_1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Change_PD_2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Both_CUR_LIM
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_src_change
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
</UL>

<P><STRONG><a name="[4d]"></a>CCC_I2C_ReadReg_COPY_11</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ccc_i2c.o(i.CCC_I2C_ReadReg_COPY_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CCC_I2C_ReadReg_COPY_11 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>

<P><STRONG><a name="[4e]"></a>CCC_I2C_ReadReg_COPY_22</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_ReadReg_COPY_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>

<P><STRONG><a name="[57]"></a>CCC_I2C_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ccc_i2c.o(i.CCC_I2C_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_22
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_11
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_set_ADC_Source
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_Mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_DMDP
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OFF_CC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_W
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_V
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Enable__SCP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Change_PD_2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Both_CUR_LIM
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_src_change
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_I2C_Write
</UL>

<P><STRONG><a name="[58]"></a>CCC_I2C_WriteReg_COPY_11</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ccc_i2c.o(i.CCC_I2C_WriteReg_COPY_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CCC_I2C_WriteReg_COPY_11 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
</UL>

<P><STRONG><a name="[59]"></a>CCC_I2C_WriteReg_COPY_22</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_WriteReg_COPY_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
</UL>

<P><STRONG><a name="[23]"></a>CLKTRIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.CLKTRIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Disable_I2C_Write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sw3516h.o(i.Disable_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Disable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Enable_I2C_Write</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sw3516h.o(i.Enable_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_DMDP
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OFF_CC
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_V
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Enable__SCP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Change_PD_2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Both_CUR_LIM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
</UL>

<P><STRONG><a name="[6e]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.GPIOC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.GPIOD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HAL_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cs32l010_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_Mode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_W
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_V
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Enable__SCP
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Both_CUR_LIM
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_src_change
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
</UL>

<P><STRONG><a name="[40]"></a>HAL_GPIO_Init</STRONG> (Thumb, 636 bytes, Stack size 24 bytes, cs32l010_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IO_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init_COPY_22
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_Out
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_In
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_Out
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_In
</UL>

<P><STRONG><a name="[45]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cs32l010_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[85]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cs32l010_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cs32l010_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IO_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init_COPY_22
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[5d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cs32l010_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[6c]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cs32l010_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5e]"></a>HAL_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs32l010_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>HAL_InitTick</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cs32l010_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[60]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[63]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cs32l010_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[65]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, cs32l010_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[66]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, cs32l010_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[67]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1126 bytes, Stack size 16 bytes, cs32l010_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[62]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cs32l010_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cs32l010_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.I2C_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.IWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>LED_IO_Init</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, main.o(i.LED_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LED_IO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.LPTIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LPUART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.LPUART_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>OWIRE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.OWIRE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PCA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.PCA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.SPI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SW3516H_Set_PPS</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, sw3516h.o(i.SW3516H_Set_PPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SW3516H_Set_PPS &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_src_change
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cs32l010_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SystemClock_Config</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system_cs32l010.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIM10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.TIM10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM11_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.TIM11_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.TIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>VC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.VC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs32l010_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cs32l010.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cs32l010_hal_adc.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Power
</UL>

<P><STRONG><a name="[6f]"></a>change_Power</STRONG> (Thumb, 896 bytes, Stack size 4 bytes, sw3516h_user.o(i.change_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = change_Power &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_setting_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>check_Port</STRONG> (Thumb, 678 bytes, Stack size 32 bytes, sw3516h_user.o(i.check_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_Port &rArr; sw3516_set_ADC_Source &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_set_ADC_Source
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Read_AD_Value_H
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Read_AD_Value
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Check_Port_C_2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Check_Port_C_1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Check_Port_A_1
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>check_Samsung</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, sw3516h.o(i.check_Samsung))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = check_Samsung &rArr; sw3516_Set_DMDP &rArr; Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_set_ADC_Source
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_DMDP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Read_AD_Value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OFF_CC
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>cycle_check</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sw3516h_user.o(i.cycle_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cycle_check &rArr; SW3516H_Set_PPS &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_Mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_DMDP
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_W
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_V
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Enable__SCP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Change_PD_2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Both_CUR_LIM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>init_setting_reg</STRONG> (Thumb, 488 bytes, Stack size 0 bytes, sw3516h_user.o(i.init_setting_reg))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Power
</UL>

<P><STRONG><a name="[84]"></a>init_sw3516</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, sw3516h_user.o(i.init_sw3516))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = init_sw3516 &rArr; SW3516H_Set_PPS &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_setting_reg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_Mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Set_DMDP
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_W
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Except_PD_V
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Enable__SCP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Change_PD_2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Both_CUR_LIM
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 512 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; init_sw3516 &rArr; SW3516H_Set_PPS &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IO_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Power
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_set_ADC_Source
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Read_AD_Value
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_I2C_Write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init_COPY_22
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6b]"></a>set_src_change</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sw3516h.o(i.set_src_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_OpenPDO_20V
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw3516_Change_PD_2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW3516H_Set_PPS
</UL>

<P><STRONG><a name="[83]"></a>sw3516_Both_CUR_LIM</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Both_CUR_LIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sw3516_Both_CUR_LIM &rArr; Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[7f]"></a>sw3516_Change_PD_2</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, sw3516h.o(i.sw3516_Change_PD_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sw3516_Change_PD_2 &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_src_change
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[76]"></a>sw3516_Check_Port_A_1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sw3516h.o(i.sw3516_Check_Port_A_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sw3516_Check_Port_A_1 &rArr; CCC_I2C_ReadReg &rArr; CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
</UL>

<P><STRONG><a name="[77]"></a>sw3516_Check_Port_C_1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sw3516h.o(i.sw3516_Check_Port_C_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sw3516_Check_Port_C_1 &rArr; CCC_I2C_ReadReg &rArr; CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
</UL>

<P><STRONG><a name="[78]"></a>sw3516_Check_Port_C_2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sw3516h.o(i.sw3516_Check_Port_C_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sw3516_Check_Port_C_2 &rArr; CCC_I2C_ReadReg &rArr; CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
</UL>

<P><STRONG><a name="[82]"></a>sw3516_Enable__SCP</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Enable__SCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sw3516_Enable__SCP &rArr; Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[80]"></a>sw3516_Except_PD_V</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Except_PD_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sw3516_Except_PD_V &rArr; Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[7d]"></a>sw3516_Except_PD_W</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Except_PD_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sw3516_Except_PD_W &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[7a]"></a>sw3516_OFF_CC</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_OFF_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sw3516_OFF_CC &rArr; Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
</UL>

<P><STRONG><a name="[81]"></a>sw3516_OpenPDO_20V</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_OpenPDO_20V))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sw3516_OpenPDO_20V &rArr; set_src_change &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_src_change
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[75]"></a>sw3516_Read_AD_Value</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Read_AD_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sw3516_Read_AD_Value &rArr; CCC_I2C_ReadReg &rArr; CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
</UL>

<P><STRONG><a name="[74]"></a>sw3516_Read_AD_Value_H</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sw3516h.o(i.sw3516_Read_AD_Value_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sw3516_Read_AD_Value_H &rArr; CCC_I2C_ReadReg &rArr; CCC_I2C_ReadReg_COPY_22 &rArr; CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
</UL>

<P><STRONG><a name="[7b]"></a>sw3516_Set_DMDP</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Set_DMDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sw3516_Set_DMDP &rArr; Enable_I2C_Write &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_I2C_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
</UL>

<P><STRONG><a name="[7e]"></a>sw3516_Set_Mode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sw3516_Set_Mode &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sw3516
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_check
</UL>

<P><STRONG><a name="[73]"></a>sw3516_set_ADC_Source</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sw3516h.o(i.sw3516_set_ADC_Source))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sw3516_set_ADC_Source &rArr; CCC_I2C_WriteReg &rArr; CCC_I2C_WriteReg_COPY_22 &rArr; CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Port
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Samsung
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[64]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cs32l010_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[68]"></a>RCC_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cs32l010_hal_rcc.o(i.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[43]"></a>CCC_I2C_ReadByte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ccc_i2c.o(i.CCC_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_Out
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_In
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_11
</UL>

<P><STRONG><a name="[4f]"></a>CCC_I2C_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ccc_i2c.o(i.CCC_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCC_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_11
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_11
</UL>

<P><STRONG><a name="[52]"></a>CCC_I2C_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ccc_i2c.o(i.CCC_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCC_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_11
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_11
</UL>

<P><STRONG><a name="[50]"></a>CCC_I2C_WriteByte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ccc_i2c.o(i.CCC_I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCC_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_11
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_11
</UL>

<P><STRONG><a name="[51]"></a>CCC_IIC_WaitAck</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ccc_i2c.o(i.CCC_IIC_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_Out
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_In
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_11
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_11
</UL>

<P><STRONG><a name="[46]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ccc_i2c.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[44]"></a>Set_SDA_In</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, ccc_i2c.o(i.Set_SDA_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set_SDA_In &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[47]"></a>Set_SDA_Out</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, ccc_i2c.o(i.Set_SDA_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[48]"></a>CCC_I2C_ReadByte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CCC_I2C_ReadByte &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_Out
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_In
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_22
</UL>

<P><STRONG><a name="[53]"></a>CCC_I2C_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCC_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_22
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_22
</UL>

<P><STRONG><a name="[56]"></a>CCC_I2C_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCC_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_22
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_22
</UL>

<P><STRONG><a name="[54]"></a>CCC_I2C_WriteByte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ccc_i2c_copy_22.o(i.CCC_I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCC_I2C_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_22
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_22
</UL>

<P><STRONG><a name="[55]"></a>CCC_IIC_WaitAck</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ccc_i2c_copy_22.o(i.CCC_IIC_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CCC_IIC_WaitAck &rArr; Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_Out
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SDA_In
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteReg_COPY_22
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadReg_COPY_22
</UL>

<P><STRONG><a name="[4a]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ccc_i2c_copy_22.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_WriteByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_Start
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[49]"></a>Set_SDA_In</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, ccc_i2c_copy_22.o(i.Set_SDA_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set_SDA_In &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>

<P><STRONG><a name="[4b]"></a>Set_SDA_Out</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, ccc_i2c_copy_22.o(i.Set_SDA_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set_SDA_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_IIC_WaitAck
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCC_I2C_ReadByte
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
